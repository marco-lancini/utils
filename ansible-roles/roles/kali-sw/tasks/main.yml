---
# ----------------------------------------------------------------------------------------
# PREPARE
# ----------------------------------------------------------------------------------------
- name: Create directories
  register: dir_done
  file: path="{{ item }}" state=directory
  with_items:
    - '{{ kali_make_dirs|default([]) }}'

# ----------------------------------------------------------------------------------------
# INSTALL
# ----------------------------------------------------------------------------------------
- name: Install Tools via APT
  when: dir_done is success
  register: apt_done
  sudo: true
  apt: name={{ item }} state=present
  with_items:
    - '{{ kali_apt|default([]) }}'

- name: Install Tools via pip
  when: dir_done is success
  register: pip_done
  sudo: true
  pip: name={{ item }}
  with_items:
    - '{{ kali_pip|default([]) }}'

- name: Install Tools via easy_install
  when: pip_done is success
  register: easy_install_done
  sudo: true
  easy_install: name={{ item }}
  with_items:
    - '{{ kali_easy_install|default([]) }}'

- name: Install Tools via gem
  when: easy_install_done is success
  register: gem_done
  sudo: true
  gem: name={{ item.package }}
    state={{ item.state|default("latest") }}
  with_items:
    - '{{ kali_gem|default([]) }}'

- name: Install Tools via go
  when: gem_done is success
  register: go_done
  sudo: true
  shell: go get {{ item }}
  with_items:
    - '{{ kali_go|default([]) }}'

- name: Clone GIT repositories
  when: go_done is success
  register: git_done
  git: repo={{ item.repo }}
    dest={{tools_dir}}/{{ item.dest }}
    accept_hostkey=yes
    version={{ item.version|default(\"master\") }}
    force={{ item.force|default("no") }}
  with_items:
    - '{{ kali_git_repositories|default([]) }}'

- name: Manually build go packages
  when: git_done is success
  command: |
    mkdir -p {{ item.go_folder }}
    mv {{tools_dir}}/{{ item.git_name }} {{ item.go_folder }}
    chdir={{ item.go_folder }} go get
    chdir={{ item.go_folder }} go build
    chdir={{ item.go_folder }} go install
  with_items:
    - '{{ kali_go_build|default([]) }}'

- name: Install shortcuts
  copy:
    src: '{{ role_path }}/files/{{ item }}'
    dest: /usr/local/bin/{{ item }}
    mode: a+x
  with_items:
    - '{{ kali_shortcuts|default([]) }}'

- name: Download binaries
  when: git_done is success
  register: bin_done
  get_url: url={{ item.url }}
    dest={{ item.dest }}
    mode=a+x
  with_items:
    - '{{ kali_binary|default([]) }}'

- name: Install DEB binaries
  when: bin_done is success
  apt: deb="{{item}}"
  sudo: true
  with_items:
    - '{{ kali_deb|default([]) }}'

- name: Download and extract zipped installs
  when: git_done is success
  register: tars_done
  unarchive: src={{ item.src }}
    dest={{ item.dest}}
    remote_src=yes
  with_items:
    - '{{ kali_tars|default([]) }}'

- name: Copy configuration files
  copy:
    src: '{{ role_path }}/files/{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
    - '{{ kali_config|default([]) }}'

- name: Run bash scripts
  when: git_done is success
  script: ../files/{{ item }}
  with_items:
    - '{{ kali_bash|default([]) }}'

# ----------------------------------------------------------------------------------------
# CUSTOM
# ----------------------------------------------------------------------------------------
# ---------- SSH
- name: Change SSH settings
  when: apt_done is success
  command: '{{item}}'
  with_items:
    - sed -i 's/^PermitRootLogin .*/PermitRootLogin yes/g' "/etc/ssh/sshd_config" # Accept password login
    - sed -i 's/^#AuthorizedKeysFile /AuthorizedKeysFile /g' "/etc/ssh/sshd_config" # Allow for key based login

# ---------- GIT
- name: Setup git
  when: apt_done is success
  command: '{{item}}'
  with_items:
    #- git config --global user.name "Marco Lancini"
    #- git config --global user.email "info@marcolancini.it"
    - git config --global core.editor "vim" #--- Set as default editor
    - git config --global merge.tool vimdiff #--- Set as default mergetool
    - git config --global merge.conflictstyle diff3
    - git config --global mergetool.prompt false
    - git config --global push.default simple #--- Set as default push

# ---------- VULNSCAN
- name: Vulnscan Permissions
  when: tars_done is success
  shell: chmod -R 0755 /usr/share/nmap/scripts/; find /usr/share/nmap/scripts/ -type f -exec chmod 0644 {} \;

# ---------- IMPACKET
- name: Install Impacket
  when: git_done is success
  command: chdir="{{ tools_dir }}/impacket/" pip install .

# ---------- AUTODANE
- name: Install Autodane
  when: git_done is success
  command: chdir="{{ tools_dir }}/autodane/" ./install

# ---------- EYEWITNESS
- name: Install EyeWitness
  when: git_done is success
  command: chdir="{{ tools_dir }}/eyewitness/" ./setup/setup.sh

# ---------- RTFM
- name: Install RTFM
  when: git_done is success
  command: chdir="{{ tools_dir }}/rtfm/" ./rtfm.py -u

# ---------- RDP-SEC-CHECK
- name: Install rdp-sec-check
  when: git_done is success
  command: cpan Encoding::BER

# ---------- MASSCAN
- name: Install masscan
  when: git_done is success
  command: '{{item}}'
  with_items:
    - chdir="{{ tools_dir }}/masscan/" make -j
    - chdir="{{ tools_dir }}/masscan/" cp bin/masscan /usr/local/bin/masscan

# ---------- cmdsql
- name: Install cmdsql
  when: git_done is success
  command: '{{item}}'
  with_items:
    - ln -sf /opt/cmdsql/ /usr/share/webshells/aspx/cmdsql

# ---------- SECLISTS
- name: Install seclists
  file:
    src: /usr/share/seclists
    dest: /usr/share/wordlists/seclists
    state: link

# ---------- BEEF
- name: Configure BEEF
  when: git_done is success
  command: '{{item}}'
  with_items:
    - sed -i 's/user:.*".*"/user:root/' "/usr/share/beef-xss/config.yaml"
    - sed -i 's/passwd:.*".*"/passwd:toor/'  "/usr/share/beef-xss/config.yaml"

# ---------- b374k
- name: Install b374k
  when: git_done is success
  command: '{{item}}'
  with_items:
    - chdir="{{ tools_dir }}/b374k/" php index.php -o b374k.php -s
    - ln -sf /opt/b374k /usr/share/webshells/php/b374k

# ---------- adminer
- name: Install adminer
  when: git_done is success
  command: '{{item}}'
  with_items:
    - chdir="{{ tools_dir }}/adminer/" php compile.php 2>/dev/null
    - ln -sf $(find /opt/adminer/ -name adminer-*.php -type f -print -quit) /usr/share/webshells/php/adminer.php

# ---------- NFSSHELL
- name: git_done Make
  when: git_done is success
  register: nfsshell_make
  command: '{{item}}'
  with_items:
    - mv "{{ tools_dir }}/nfsshell/nfsshell-master/*" "{{ tools_dir }}/nfsshell/"
    - chdir="{{ tools_dir }}/nfsshell/" make

- name: NFSShell Install
  when: nfsshell_make is success
  copy:
    src: '{{ tools_dir }}/nfsshell/nfsshell'
    dest: /usr/local/bin/nfsshell
    mode: 777

# ---------- CISCO DECRYPT
- name: Cisco Decrypt Install
  when: git_done is success
  command: chdir="{{ tools_dir }}/cisco-decrypt/" gcc -Wall -lgcrypt -o /usr/bin/cisco-decrypt cisco-decrypt.c

# ---------- MIBS DOWNLOADER
- name: Install MIBS Downloader
  when: git_done is success
  command: download-mibs

# ---------- MINGW
- name: Install MinGW
  when: tars_done is success
  shell: |
    cd ~/.wine/drive_c/MinGW/ && or FILE in mingw32-base mingw32-gcc-g++ mingw32-gcc-objc; do
        wine ./bin/mingw-get.exe install "${FILE}" 2>&1
    done

- name: Add MinGW to Windows Path
  command: sed -i '/^"PATH"=/ s_"$_;C:\\\\MinGW\\\\bin"_' ~/.wine/system.reg

# ----------------------------------------------------------------------------------------
# CLEANUP
# ----------------------------------------------------------------------------------------
- name: Clean the system
  script: ../files/cleanup.sh

- debug: msg="{{ item }}"
  with_items:
    - 'Update Pure-FTPd credentials: anonymous/anonymous'
    - 'Update Samba credentials: guest/<blank>'
    - 'Update BeEF credentials: root/toor  [/usr/share/beef-xss/config.yaml]'
    - 'Install PT repo'
