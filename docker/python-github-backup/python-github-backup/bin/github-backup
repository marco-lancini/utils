#!/usr/bin/env python

import os, sys, logging
from datetime import datetime

from github_backup.github_backup import (
    backup_account,
    backup_repositories,
    check_git_lfs_install,
    filter_repositories,
    get_authenticated_user,
    log_info,
    log_warning,
    mkdir_p,
    parse_args,
    retrieve_repositories,
)

from github_backup.zip import do_zip
from github_backup.s3upload import upload_file

logging.basicConfig(
    format='%(asctime)s.%(msecs)03d: %(message)s',
    datefmt='%Y-%m-%dT%H:%M:%S',
    level=logging.INFO
)

def main():
    #
    # Parse Arguments
    #
    args = parse_args()
    output_directory = os.path.realpath(args.output_directory)
    zip_directory = os.path.realpath(args.output_zip)
    output_s3 = args.output_s3

    #
    # Setup folders
    #
    if not os.path.isdir(output_directory):
        log_info('Create output directory {0}'.format(output_directory))
        mkdir_p(output_directory)

    if not os.path.isdir(zip_directory):
        log_info('Create ZIP directory {0}'.format(zip_directory))
        mkdir_p(zip_directory)

    if args.lfs_clone:
        check_git_lfs_install()

    if not args.as_app:
        log_info('Backing up user {0} to {1}'.format(args.user, output_directory))
        authenticated_user = get_authenticated_user(args)
    else:
        authenticated_user = {'login': None}

    #
    # Retrieve data
    #
    repositories = retrieve_repositories(args, authenticated_user)
    repositories = filter_repositories(args, repositories)
    backup_repositories(args, output_directory, repositories)
    backup_account(args, output_directory)
    log_info("[!] Ingestion complete")

    #
    # Zip content
    #
    today_date = datetime.today().strftime('%Y-%m-%d')
    zip_name = f"{today_date}_github_backup.zip"
    fname = os.path.join(zip_directory, zip_name)
    log_info(f"[!] Zipping output folder: {fname}")
    do_zip(output_directory, fname)

    #
    # Sync to S3
    #
    log_info(f"[!] Uploading ZIP to S3: {output_s3}/{zip_name}")
    upload_file(fname, output_s3, object_name=zip_name)

    log_info("[!] Completed!")


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        log_warning(str(e))
        sys.exit(1)
